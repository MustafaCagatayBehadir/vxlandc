submodule cisco-dc-l3out-routing {
    belongs-to cisco-dc {
        prefix "cisco-dc";
    }

    yang-version 1.1;

    import ietf-inet-types {
        prefix inet;
    }

    import tailf-common {
        prefix tailf;
    }

    import tailf-ncs {
        prefix ncs;
    }

    include cisco-dc-common {
        revision-date "2022-01-17";
    }

    revision 2022-01-17 {
        description
          "Initial Revision.";
    }

    grouping l3out-routing {
        container routing {
            when "../bd-subnet";
            tailf:info "Specify routing details";
            presence
              true;

            list bgp {
                tailf:info "Define bgp routes";
                key peer-address;

                leaf peer-address {
                    type inet:ip-address;
                }

                container source-interface {
                    tailf:info "Attach source interface connection\n"
                    +   "it can be either fabric external connection OR loopback";
                    choice interface {
                        mandatory true;

                        case fabric-external-connection {
                            container fabric-external-connection {
                                tailf:info "attach external connection";

                                leaf node {
                                    must "/cisco-dc:dc-site[cisco-dc:fabric=current()/../../../../../site]"
                                    +   "/cisco-dc:node[cisco-dc:hostname=current()]/cisco-dc:node-role = 'border-leaf'" {
                                        error-message
                                          "Node type must be border-leaf";
                                    }

                                    tailf:info "Node name";
                                    type leafref {
                                        path "/cisco-dc:dc-site[cisco-dc:fabric=current()/../../../../../site]"
                                        + "/cisco-dc:node/cisco-dc:hostname";
                                    }
                                    mandatory true;
                                }

                                leaf connection {
                                    tailf:info "Fabric l3out uplink can be uplink-to-dci-gw-01 or uplink-to-dci-gw-02";
                                    type enumeration {
                                        enum uplink-to-dci-gw-01;
                                        enum uplink-to-dci-gw-02;
                                    }
                                    mandatory true;
                                }

                                leaf peer-template {
                                    tailf:info "Peer template name";
                                    type leafref {
                                        path "/cisco-dc:dc-site[cisco-dc:fabric=current()/../../../../../site]"
                                        + "/cisco-dc:day0/cisco-dc:bgp-peer-templates";
                                    }
                                    mandatory true;
                                }

                                leaf address {
                                    tailf:hidden "dc";
                                    type tailf:ip-address-and-prefix-length;
                                }

                                leaf vlan {
                                    tailf:hidden "dc";
                                    type vlan;
                                    tailf:default-ref "../../../../../cisco-dc:vlan-id";
                                }

                                leaf port-channel-id {
                                    tailf:hidden "dc";
                                    type uint16 {
                                        range "500..600";
                                    }
                                }
                            }
                        }

                        case fabric-internal-connection {

                            container fabric-internal-connection {
                                tailf:info "attach internal connection";
                                list loopback {
                                    tailf:info "Associate bgp routing on loopback";
                                    key "id node";

                                    leaf id {
                                        tailf:info "Specify loopback id";
                                        type loopback-id;
                                    }

                                    leaf node {
                                        must "/cisco-dc:dc-site[cisco-dc:fabric=current()/../../../../../../site]"
                                        +   "/cisco-dc:node[cisco-dc:hostname=current()]/cisco-dc:node-role = 'access-leaf'" {
                                            error-message
                                              "Node type must be access-leaf";
                                        }

                                        tailf:info "Node name";
                                        type leafref {
                                            path "/cisco-dc:dc-site[cisco-dc:fabric=current()/../../../../../../site]"
                                        + "/cisco-dc:node/cisco-dc:hostname";
                                        }
                                        mandatory true;
                                    }

                                    leaf address {
                                        tailf:info "A.B.C.D/L;;Prefix or X:X::X/L;;Prefix for Loopback";
                                        type tailf:ip-address-and-prefix-length;
                                        mandatory true;
                                    }
                                }
                            }
                        }
                    }
                }

                leaf remote-as {
                    tailf:info "Specify remote asn number";
                    type uint32;
                    mandatory true;
                }

                leaf local-as {
                    tailf:info "Specify local asn number";
                    type uint32;
                }

                leaf-list peer-af-controls {
                    tailf:info "Peer AF controls";
                    type enumeration {
                        enum send-com;
                        enum send-ext-com;
                        enum nh-self;
                        enum dis-peer-as-check;
                        enum allow-self-as;
                        enum as-override;
                    }
                }

                leaf peer-control {
                    tailf:info "Peer control";
                    type enumeration {
                        enum dis-conn-check;
                        enum bfd;
                    }
                }

                leaf password {
                    tailf:info "Specify the BGP password";
                    type tailf:aes-cfb-128-encrypted-string;
                }

                leaf weight {
                    tailf:info "Specify weight";
                    type uint16;
                }

                leaf ttl {
                    tailf:info "Specify ttl value";
                    type uint8;
                    default 5;
                }

                list peer-route-policy {
                    tailf:info "Attach route policy name, please make sure, its defined under dc-route-policy";
                    key direction;

                    leaf direction {
                        tailf:info "Define direction on route-policy";
                        type enumeration {
                            enum "in";
                            enum "out";
                        }
                    }

                    leaf profile {
                        type leafref {
                            path "../../../../../../cisco-dc:dc-route-policy/cisco-dc:route-policy/cisco-dc:profile";
                        }
                        must "deref(current())/../../dc-route-policy-type = 'tenant' and "
                        + "deref(current())/../../tenant = ../../../../cisco-dc:tenant" {
                            tailf:dependency ".";
                            error-message
                              "Route policy type should be tenant and route policy tenant must match bridge-domain tenant.";
                        }

                        must "not(deref(current())/../address-family) or "
                        + "deref(current())/../address-family = 'ipv4' and ../../address-family = 'ipv4' or "
                        + "deref(current())/../address-family = 'ipv6' and ../../address-family = 'ipv6'" {
                            tailf:dependency ".";
                            error-message
                              "Route policy address-family should match the bgp neighbor address-family.";                            
                        }
                    }
                }

                container timers {
                    tailf:info "Specify keepalive and hold timers";
                    presence
                      true;
                    leaf keepalive {
                        type uint16;
                        default 8;
                    }
                    leaf holdtime {
                        type uint16;
                        default 24;
                    }
                }

                leaf as-number {
                    tailf:hidden "Just for convenience";
                    type inet:as-number;
                    tailf:default-ref "../../../../../cisco-dc:fabric-parameters/cisco-dc:as-number";
                }

                leaf address-family {
                    tailf:info "BGP address-family can be IPv4 | IPv6";
                    tailf:hidden "dc";
                    type enumeration {
                        enum ipv4;
                        enum ipv6;
                    }
                }
            }

            leaf vrf {
                tailf:hidden "Just for convenience";
                type string;
                tailf:default-ref "../../cisco-dc:vrf";
            }
        }
    }
}